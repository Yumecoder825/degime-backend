# Generated by Django 5.0.1 on 2024-01-31 14:38

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ChatRoom',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('room_name', models.CharField(max_length=100, unique=True)),
                ('chat_group', models.CharField(default='', max_length=50)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='creator', to=settings.AUTH_USER_MODEL)),
                ('member', models.ManyToManyField(related_name='member_group', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ChatMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.JSONField()),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('room_name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='social_app.chatroom')),
            ],
            options={
                'ordering': ['-message__timestamp'],
            },
        ),
        migrations.CreateModel(
            name='ContactData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('block_setting', models.CharField(blank=True, default='None', max_length=50)),
                ('group_Name', models.CharField(default='Business', max_length=50)),
                ('memo', models.TextField(blank=True)),
                ('is_chat_available', models.CharField(default='False', max_length=10)),
                ('is_pending', models.CharField(default='False', max_length=10)),
                ('is_incoming', models.CharField(default='False', max_length=10)),
                ('member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='member', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ContactGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group_Name', models.CharField(default='Business', max_length=50)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='OnlineBusinessCard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url_name', models.CharField(max_length=50, unique=True)),
                ('faceImg', models.URLField(blank=True, default='')),
                ('realName', models.CharField(blank=True, default='', max_length=50)),
                ('company_url', models.CharField(blank=True, default='', max_length=100)),
                ('companyName', models.CharField(blank=True, default='', max_length=100)),
                ('position', models.CharField(blank=True, default='', max_length=100)),
                ('phoneNumber', models.CharField(blank=True, default='', max_length=50)),
                ('mobilePhoneNumber', models.CharField(blank=True, default='', max_length=50)),
                ('address', models.CharField(blank=True, default='', max_length=255)),
                ('bgColor', models.CharField(blank=True, default='', max_length=100)),
                ('bgURL', models.CharField(blank=True, default='', max_length=100)),
                ('wordColor', models.CharField(blank=True, default='', max_length=100)),
                ('cardColor', models.CharField(blank=True, default='', max_length=100)),
                ('cardURL', models.CharField(blank=True, default='', max_length=100)),
                ('idCard', models.JSONField(blank=True, default=dict)),
                ('socialLink', models.JSONField(blank=True, default=dict)),
                ('onlineCard_Data', models.JSONField(blank=True, default=dict)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SNSTree',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url_name', models.CharField(max_length=50, unique=True)),
                ('faceImg', models.CharField(blank=True, default='', max_length=255)),
                ('accountName', models.CharField(blank=True, default='', max_length=50)),
                ('profile', models.CharField(blank=True, default='', max_length=100)),
                ('bgColor', models.CharField(blank=True, default='', max_length=100)),
                ('bgURL', models.CharField(blank=True, default='', max_length=100)),
                ('wordColor', models.CharField(blank=True, default='', max_length=100)),
                ('cardColor', models.CharField(blank=True, default='', max_length=100)),
                ('cardURL', models.CharField(blank=True, default='', max_length=100)),
                ('idCard', models.JSONField(blank=True, default=dict)),
                ('snsTree_Data', models.JSONField(blank=True, default=dict)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
